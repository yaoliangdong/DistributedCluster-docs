<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.cluster</groupId>
  <artifactId>parent-pom</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>pom</packaging>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <spring.version>4.2.6.RELEASE</spring.version>
    <cas.client.core.version>3.2.1-RELEASE</cas.client.core.version>
    <mybatis.version>3.2.8</mybatis.version>
    <mybatis.spring.version>1.2.2</mybatis.spring.version>
    <druid.version>1.0.27</druid.version>
    <mysql.drive.version>5.1.40</mysql.drive.version>
    <!-- spring 1.8.1 版本才支持redis集群 密码验证  -->
    <spring.data.redis.version>1.8.1.RELEASE</spring.data.redis.version>
	<redis.client.version>2.9.0</redis.client.version>
	<com.google.code.gson.version>2.3.1</com.google.code.gson.version>
	<dubbo.version>2.5.3</dubbo.version>
	<zookeeper.version>3.4.5</zookeeper.version>
	<zkclient.version>0.4</zkclient.version>
	<jstl.version>1.2</jstl.version>
	<standard.version>1.1.2</standard.version>
	
	<maven.antrun.plugin.version>1.8</maven.antrun.plugin.version>
	<maven.assembly.plugin.version>2.5.4</maven.assembly.plugin.version>
  </properties>
  
  <distributionManagement>
    <site>
      <id>website</id>
      <url>scp://webhost.company.com/www/website</url>
    </site>
  </distributionManagement>
  
  <dependencyManagement>
    <dependencies>
    		<!-- spring mvc -->
	        <dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-webmvc</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-web</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-jdbc</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- CAS Client -->
			<dependency>
				<groupId>org.jasig.cas.client</groupId>
				<artifactId>cas-client-core</artifactId>
				<version>${cas.client.core.version}</version>
			</dependency>
			<!-- mybatis -->
			<dependency>
				<groupId>org.mybatis</groupId>
				<artifactId>mybatis</artifactId>
				<version>${mybatis.version}</version>
			</dependency>
			<dependency>
				<groupId>org.mybatis</groupId>
				<artifactId>mybatis-spring</artifactId>
				<version>${mybatis.spring.version}</version>
			</dependency>
			<!-- ali connection pool -->
			<dependency>
			     <groupId>com.alibaba</groupId>
			     <artifactId>druid</artifactId>
			     <version>${druid.version}</version>
			</dependency>
			<dependency>
		         <groupId>mysql</groupId>
		         <artifactId>mysql-connector-java</artifactId>
		         <version>${mysql.drive.version}</version>
			</dependency>
			<!-- redis -->
			<dependency>
				<groupId>org.springframework.data</groupId>
				<artifactId>spring-data-redis</artifactId>
				<version>${spring.data.redis.version}</version>
			</dependency>
			<dependency>
				<groupId>redis.clients</groupId>
				<artifactId>jedis</artifactId>
				<version>${redis.client.version}</version>
			</dependency>
			<!-- gson -->
			<dependency>
	    		<groupId>com.google.code.gson</groupId>
	    		<artifactId>gson</artifactId>
	    		<version>${com.google.code.gson.version}</version>
			</dependency>
			<!-- dubbo -->
			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>dubbo</artifactId>
				<version>${dubbo.version}</version>
				<!-- 排除dubbo的spring 2.5.6.SEC03包依赖 ，否则启动报错 :java.lang.reflect.MalformedParameterizedTypeException-->
				<exclusions>
					<exclusion>
						<groupId>org.springframework</groupId>
						<artifactId>spring</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<!-- zookeeper -->
			<dependency>
				<groupId>org.apache.zookeeper</groupId>
				<artifactId>zookeeper</artifactId>
				<version>${zookeeper.version}</version>
				<exclusions>
					<exclusion>
						<groupId>javax.jms</groupId>
						<artifactId>jms</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.sun.jdmk</groupId>
						<artifactId>jmxtools</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.sun.jmx</groupId>
						<artifactId>jmxri</artifactId>
					</exclusion>
					<exclusion>
						<groupId>org.slf4j</groupId>
						<artifactId>slf4j-log4j12</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<!-- zookeeper client -->
			<dependency>
				<groupId>com.101tec</groupId>
				<artifactId>zkclient</artifactId>
				<version>${zkclient.version}</version>
				<exclusions>
					<exclusion>
						<groupId>org.apache.zookeeper</groupId>
						<artifactId>zookeeper</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<!-- jstl -->
			<dependency>
			    <groupId>jstl</groupId>
			    <artifactId>jstl</artifactId>
			    <version>${jstl.version}</version>
			</dependency>
			<dependency>
			    <groupId>taglibs</groupId>
			    <artifactId>standard</artifactId>
			    <version>${standard.version}</version>
			</dependency>
			<!-- <dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-orm</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-core</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-beans</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-tx</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context-support</artifactId>
				<version>${spring.version}</version>
			</dependency> -->
    </dependencies>
    </dependencyManagement>
    <build>
	    <pluginManagement>
	      <plugins>
	      	<!-- 公共静态资源管理 -->
	      	<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>${maven.antrun.plugin.version}</version>
				<executions>
					<execution>
						<id>default</id>
						<phase>compile</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target name="default">
								<!-- 打印环境变量 -->
								<echo>Maven project basedir = ${project.basedir}</echo>
								<echo>Maven project name = ${project.name}</echo>
								<echo>Maven project version = ${project.version}</echo>
								<echo>Maven project groupId = ${project.groupId}</echo>
								<echo>Maven project artifactId = ${project.artifactId}</echo>
								<echo>Maven project packaging = ${project.packaging}</echo>
								<echo>Maven project build sourceEncoding = ${project.build.sourceEncoding}</echo>
								<echo>Maven project build finalName = ${project.build.finalName}.${project.packaging}</echo>
								<echo>Maven project build directory = ${project.build.directory}</echo>
								<echo>Maven project build sourceDirectory = ${project.build.sourceDirectory}</echo>
								<echo>Maven project build outputDirectory = ${project.build.outputDirectory}</echo>
								<echo>Maven project build testSourceDirectory = ${project.build.testSourceDirectory}</echo>
								<echo>Maven project build testOutputDirectory = ${project.build.testOutputDirectory}</echo>
								<echo>Maven project reporting outputDirectory = ${project.reporting.outputDirectory}</echo>
								<echo>Maven settings localRepository = ${settings.localRepository}</echo>
								<echo>Spring instrument = ${settings.localRepository}/org/springframework/spring-instrument/${spring.instrument.version}/spring-instrument-${spring.instrument.version}.jar</echo>
								<echo>System default encoding = ${file.encoding}</echo>
								<!-- war包,条件逻辑判断  -->
								<condition property="project.packaging.unzip.switch">
									<and>
										<equals arg1="${project.packaging}" arg2="war" casesensitive="false" trim="true" />
									</and>
								</condition> 
								<condition property="project.packaging.unzip.remove">
									<not>
										<available file="${project.basedir}/.assets.exclude" />
									</not>
								</condition>
								<!--
								************************************************
								ant的宏：
									         定义一个宏相当于定义了一个函数，
									         宏作用和函数的作用一样，抽取公共编译方法
								宏的定义：	   
										macrodef标签定义宏
										attribute标签定义变量
										sequential标签包裹的则是ant的target任务
										调用宏，通过macrodef标签上的name属性
								demo:
										<macrodef name="macrodefTest">
											<attribute name="sex" />
											<attribute name="age" />
											<sequential>
												<echo>姓名：@{sex}</echo>
												<echo>姓名：@{age}</echo>
											</sequential>	 
										</macrodef>
										<macrodefTest sex="男" age="12"/>
								************************************************
								-->
								<!-- 定义宏，拷贝parent-web项目的静态资源到每个子xxx-web的webapp目录-->
								<macrodef name="macro.task">
									<sequential>
										<unzip src="E:\repo\com\cluster\parent-web\parent-web\0.0.1-SNAPSHOT\parent-web-0.0.1-SNAPSHOT.jar" dest="${project.build.directory}">
											<patternset>
												<include name="com/cluster/web/assets/**" if="${project.packaging.unzip.remove}" />
												<include name="com/cluster/web/templets/**" if="${project.packaging.unzip.remove}" />
												<include name="com/cluster/web/root/**" if="${project.packaging.unzip.remove}" />
											</patternset>
										</unzip>
										<move file="${project.build.directory}/com/cluster/web/assets" tofile="${project.basedir}/src/main/webapp/assets" failonerror="false" />
										<move file="${project.build.directory}/com/cluster/web/templets" tofile="${project.basedir}/src/main/webapp/WEB-INF" failonerror="false" />
										<move file="${project.build.directory}/com/cluster/web/root" tofile="${project.basedir}/src/main/webapp/" failonerror="false" />
									</sequential>
								</macrodef>
								<script language="javascript">
									try {
										//如果打的是war包，则执行名称为macro.task的宏任务
										if (project.getProperty("project.packaging.unzip.switch")) project.createTask("macro.task").perform();
									} catch (ex) {
										print(ex);
										print("    [unzip] Warning: Could not expand file " + project.getProperty("src") + " into " + project.getProperty("dest"));
									}
								</script>
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- jsw打包配置 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>${maven.assembly.plugin.version}</version>
				<configuration>
					<appendAssemblyId>false</appendAssemblyId>
					<descriptors>
						<descriptor>src/main/assembly/default.xml</descriptor>
					</descriptors>
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
	      </plugins>
	    </pluginManagement>
    </build>
  <modules>
  	<module>../framework</module>
  	<module>../parent-web</module>
  </modules>
</project>
