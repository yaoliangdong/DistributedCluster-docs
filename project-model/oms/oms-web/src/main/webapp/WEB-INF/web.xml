<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
  <display-name>Archetype Created Web Application</display-name>
  <welcome-file-list>
  	<welcome-file>index.do</welcome-file>  
  </welcome-file-list>  
  <context-param>  
        <param-name>contextConfigLocation</param-name>  
        <param-value>
        	classpath:spring-mybatis.xml
        	classpath:applicationContext-redis.xml
        	classpath:spring-dubbo-core.xml
        	classpath:spring-dubbo-consumer.xml
        </param-value>  
   </context-param>
  	
  	<!-- ======================== 单点登录结束 ======================== -->    
   <!-- 用于单点退出，该过滤器用于实现单点登出功能，可选配置 -->    
   <listener>    
       <listener-class>org.jasig.cas.client.session.SingleSignOutHttpSessionListener</listener-class>    
   </listener>
       
   <!-- 该过滤器用于实现单点登出功能，可选配置。 -->    
   <filter>    
       <filter-name>CAS Single Sign Out Filter</filter-name>    
       <filter-class>org.jasig.cas.client.session.SingleSignOutFilter</filter-class>    
   </filter>
   
   <filter-mapping>    
       <filter-name>CAS Single Sign Out Filter</filter-name>    
       <url-pattern>/*</url-pattern>    
   </filter-mapping> 
   
   <!-- 该过滤器负责用户的认证工作，必须启用它 -->    
   <filter>    
       <filter-name>CASFilter</filter-name>    
       <filter-class>org.jasig.cas.client.authentication.AuthenticationFilter</filter-class>    
       <init-param>    
           <param-name>casServerLoginUrl</param-name>    
           <param-value>https://cas.cluster.com:8060/cas</param-value><!-- cas 服务器登录 地址  http://IP:PORT/CasWebProName/login -->    
       </init-param>    
       <init-param>    
           <!-- 这里的server是服务端的IP -->    
           <param-name>serverName</param-name>    
           <param-value>http://wms.cluster.com:8050/wms-web/casTest/index.do</param-value><!-- 客户端服务器地址   http://IP:PORT -->    
       </init-param>    
   </filter>    
   
   <filter-mapping>    
       <filter-name>CASFilter</filter-name>    
       <url-pattern>/*</url-pattern>    
   </filter-mapping>    
       
   <!-- 该过滤器负责对Ticket的校验工作，必须启用它 -->    
   <filter>    
       <filter-name>CAS Validation Filter</filter-name>    
       <filter-class>org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter</filter-class>    
       <init-param>    
           <param-name>casServerUrlPrefix</param-name>    
           <param-value>https://cas.cluster.com:8060/cas</param-value><!-- cas 服务器地址  http://IP:PORT/CasWebProName -->    
       </init-param>    
       <init-param>    
           <param-name>serverName</param-name>    
           <param-value>http://wms.cluster.com:8050/wms-web/casTest/index.do</param-value><!-- 客户端服务器地址   http://IP:PORT -->    
       </init-param>    
   </filter>    
   <filter-mapping>    
       <filter-name>CAS Validation Filter</filter-name>    
       <url-pattern>/*</url-pattern>    
   </filter-mapping>    
       
   <!-- 该过滤器负责实现HttpServletRequest请求的包裹， 比如允许开发者通过HttpServletRequest的getRemoteUser()方法获得SSO登录用户的登录名，可选配置。 -->    
   <filter>    
       <filter-name>CAS HttpServletRequest Wrapper Filter</filter-name>    
       <filter-class>org.jasig.cas.client.util.HttpServletRequestWrapperFilter</filter-class>    
   </filter>    
   <filter-mapping>    
       <filter-name>CAS HttpServletRequest Wrapper Filter</filter-name>    
       <url-pattern>/*</url-pattern>    
   </filter-mapping>
       
   <!-- 该过滤器使得开发者可以通过org.jasig.cas.client.util.AssertionHolder来获取用户的登录名。 比如AssertionHolder.getAssertion().getPrincipal().getName()。 -->    
   <filter>    
       <filter-name>CAS Assertion Thread Local Filter</filter-name>    
       <filter-class>org.jasig.cas.client.util.AssertionThreadLocalFilter</filter-class>    
   </filter>    
   <filter-mapping>    
       <filter-name>CAS Assertion Thread Local Filter</filter-name>    
       <url-pattern>/*</url-pattern>    
   </filter-mapping>    
   <!-- ======================== 单点登录结束 ======================== -->
  
  
    
    <!-- Spring监听器 -->  
    <listener>  
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>  
    </listener> 
    
    <!-- Spring MVC -->
	<servlet>
		<servlet-name>springmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:springmvc-servlet.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>
	
</web-app>
